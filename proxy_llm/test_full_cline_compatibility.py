#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç Cline
"""

import requests
import json
import logging
import asyncio
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_sync_cline_request():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –æ—Ç Cline"""
    
    url = "http://localhost:10014/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test123",
        "User-Agent": "Cline/1.0"
    }
    
    # –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –æ—Ç Cline
    payload = {
        "model": "test",
        "messages": [
            {
                "role": "system",
                "content": "You are a helpful assistant."
            },
            {
                "role": "user",
                "content": "Hello! Can you help me with something?"
            }
        ],
        "temperature": 0.7,
        "max_tokens": 1000,
        "stream": False,
        "stream_options": {
            "include_usage": True
        },
        "reasoning_effort": "medium",
        "top_p": 0.9,
        "presence_penalty": 0.0,
        "frequency_penalty": 0.0,
        "logit_bias": {},
        "user": "user123",
        "n": 1,
        "stop": None,
        "best_of": 1,
        "logprobs": None,
        "echo": False,
        "suffix": None,
        "tools": [],
        "tool_choice": "auto",
        "response_format": {"type": "text"},
        "seed": 42,
        "max_completion_tokens": 1000,
        "truncation_strategy": {
            "type": "auto",
            "last_messages": 10
        },
        "reasoning": {
            "type": "structured",
            "format": "markdown"
        },
        "parallel_tool_calls": True,
        "store": True,
        "metadata": {
            "user_id": "12345",
            "session_id": "67890"
        }
    }
    
    try:
        logger.info("Testing full Cline compatibility (sync)...")
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        
        logger.info(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            logger.info("‚úÖ Full Cline request successful!")
            logger.info(f"Response: {json.dumps(data, indent=2, ensure_ascii=False)}")
            return True
        else:
            logger.error(f"‚ùå Request failed: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        return False

async def test_async_cline_streaming():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ streaming –∑–∞–ø—Ä–æ—Å–∞"""
    
    url = "http://localhost:10014/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test123",
        "User-Agent": "Cline/1.0"
    }
    
    # Streaming –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": "test",
        "messages": [
            {
                "role": "user",
                "content": "Tell me a short story about a cat"
            }
        ],
        "temperature": 0.7,
        "max_tokens": 200,
        "stream": True,
        "stream_options": {
            "include_usage": True
        },
        "reasoning_effort": "low"
    }
    
    try:
        logger.info("Testing Cline streaming compatibility...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as response:
                
                if response.status != 200:
                    logger.error(f"‚ùå Streaming request failed: {await response.text()}")
                    return False
                
                logger.info("‚úÖ Streaming connection established!")
                
                # –ß–∏—Ç–∞–µ–º SSE —Å–æ–±—ã—Ç–∏—è
                content = ""
                async for line in response.content:
                    line = line.decode('utf-8').strip()
                    if line.startswith('data: '):
                        data = line[6:]
                        if data == '[DONE]':
                            logger.info("‚úÖ Streaming completed successfully")
                            break
                        
                        try:
                            chunk = json.loads(data)
                            if 'choices' in chunk and chunk['choices']:
                                delta = chunk['choices'][0].get('delta', {})
                                if 'content' in delta and delta['content']:
                                    content += delta['content']
                                    print(delta['content'], end='', flush=True)
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º usage —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                                if 'usage' in chunk:
                                    logger.info(f"Usage stats: {chunk['usage']}")
                                    
                        except json.JSONDecodeError:
                            logger.warning(f"Invalid JSON chunk: {data}")
                
                print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ streaming
                logger.info(f"Final content length: {len(content)} characters")
                return True
                
    except Exception as e:
        logger.error(f"‚ùå Streaming error: {e}")
        return False

def test_minimal_compatibility():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    url = "http://localhost:10014/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test123"
    }
    
    payload = {
        "model": "test",
        "messages": [
            {"role": "user", "content": "Hello world"}
        ]
    }
    
    try:
        logger.info("Testing minimal compatibility...")
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        
        if response.status_code == 200:
            logger.info("‚úÖ Minimal compatibility test passed!")
            return True
        else:
            logger.error(f"‚ùå Minimal test failed: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Minimal test error: {e}")
        return False

if __name__ == "__main__":
    print("=== Testing Full Cline Compatibility ===")
    
    # –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    test1 = test_minimal_compatibility()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    test2 = test_sync_cline_request()
    
    # –¢–µ—Å—Ç 3: Streaming –∑–∞–ø—Ä–æ—Å
    print("\n=== Testing Streaming ===")
    test3 = asyncio.run(test_async_cline_streaming())
    
    # –ò—Ç–æ–≥–∏
    print(f"\n=== RESULTS ===")
    print(f"Minimal compatibility: {'‚úÖ PASS' if test1 else '‚ùå FAIL'}")
    print(f"Full sync request: {'‚úÖ PASS' if test2 else '‚ùå FAIL'}")
    print(f"Streaming request: {'‚úÖ PASS' if test3 else '‚ùå FAIL'}")
    
    if test1 and test2 and test3:
        print("üéâ ALL TESTS PASSED! Server is fully compatible with Cline!")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check logs for details.")