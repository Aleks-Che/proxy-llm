#!/usr/bin/env python3

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import time
import logging
import asyncio
from providers.deepseek import DeepSeekProvider
from providers.moonshot import MoonshotProvider
from providers.local import LocalProvider
from utils.token_counter import TokenCounter
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.middleware("http")
async def log_requests(request, call_next):
    client_ip = request.client.host if request.client else "unknown"
    user_agent = request.headers.get("user-agent", "unknown")
    logger.info(f"üîç Request from {client_ip}: {request.method} {request.url}")
    logger.info(f"üîç Headers: {dict(request.headers)}")
    
    # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ, –Ω–æ –Ω–µ —á–∏—Ç–∞–µ–º –µ–≥–æ
    if request.method == "POST":
        content_length = request.headers.get("content-length", "unknown")
        logger.info(f"üîç Content-Length: {content_length}")

    try:
        response = await call_next(request)
        logger.info(f"‚úÖ Response: {response.status_code}")
        logger.info(f"‚úÖ Response headers: {dict(response.headers)}")
        return response
    except Exception as e:
        logger.error(f"‚ùå Error in request processing: {e}")
        raise

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
providers = {}
if Config.DEEPSEEK_API_KEY and Config.DEEPSEEK_API_KEY != "sk-–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å":
    providers["deepseek"] = DeepSeekProvider()
    logger.info("DeepSeek provider initialized")
if Config.MOONSHOT_API_KEY:
    providers["moonshot"] = MoonshotProvider()
    logger.info("Moonshot provider initialized")

# –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
providers["local"] = LocalProvider()
logger.info("Local provider initialized")

current_provider = Config.DEFAULT_PROVIDER if Config.DEFAULT_PROVIDER in providers else "local"
token_counter = TokenCounter()

class ChatMessage(BaseModel):
    role: str
    content: str

class ChatCompletionRequest(BaseModel):
    model: Optional[str] = None
    messages: Optional[List[ChatMessage]] = None
    temperature: Optional[float] = 1.0
    max_tokens: Optional[int] = None
    stream: Optional[bool] = False

@app.get("/")
async def root():
    return {"message": "LLM Proxy Server running", "provider": current_provider}

@app.get("/health")
async def health():
    return {"status": "healthy", "provider": current_provider}

@app.post("/v1/chat/completions")
async def chat_completions(request: Request):
    logger.info("üéØ === FUNCTION STARTED ===")
    logger.info("=== START PROCESSING ===")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä—É—á–Ω—É—é
    body = await request.body()
    body_str = body.decode('utf-8', errors='ignore') if body else "empty"
    logger.info(f"üîç Raw request body: {body_str}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    import json
    try:
        data = json.loads(body_str)
        logger.info(f"‚úÖ JSON parsed successfully: {data}")
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON decode error: {e}")
        raise HTTPException(status_code=400, detail="Invalid JSON")
    
    logger.info("Returning immediate test response")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("Returning test response")
        return {
            "id": "test-id",
            "object": "chat.completion",
            "created": 1234567890,
            "model": data.get("model", "unknown-model"),
            "choices": [{
                "index": 0,
                "message": {
                    "role": "assistant",
                    "content": "This is a test response from stable server"
                },
                "finish_reason": "stop"
            }],
            "usage": {
                "prompt_tokens": 10,
                "completion_tokens": 5,
                "total_tokens": 15
            }
        }
        
    except Exception as e:
        logger.error(f"Error in chat_completions: {str(e)}")
        logger.error(f"Error type: {type(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic
from fastapi import Request
from fastapi.responses import JSONResponse
from pydantic import ValidationError

@app.exception_handler(ValidationError)
async def validation_exception_handler(request: Request, exc: ValidationError):
    body = await request.body()
    body_str = body.decode('utf-8', errors='ignore') if body else "empty"
    logger.error(f"‚ùå Pydantic validation error: {exc}")
    logger.error(f"‚ùå Request body: {body_str}")
    logger.error(f"‚ùå Error details: {exc.errors()}")
    logger.error(f"‚ùå Error type: {type(exc)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    import json
    try:
        parsed_body = json.loads(body_str) if body_str != "empty" else {}
        logger.error(f"‚ùå Parsed JSON: {parsed_body}")
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON decode error: {e}")
    
    return JSONResponse(
        status_code=400,  # –ú–µ–Ω—è–µ–º –Ω–∞ 400, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—ã –æ–∂–∏–¥–∞—é—Ç —ç—Ç–æ—Ç –∫–æ–¥
        content={"detail": exc.errors(), "body": body_str}
    )

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"‚ùå Global exception: {exc}")
    logger.error(f"‚ùå Exception type: {type(exc)}")
    import traceback
    logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
    return JSONResponse(
        status_code=500,
        content={"detail": str(exc), "type": str(type(exc))}
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=10005)