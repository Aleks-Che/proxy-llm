#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º Roo-Code
Roo-Code –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI Chat Completions API
"""

import requests
import json
import logging
import asyncio
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_sync_roo_code_request():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Roo-Code"""

    url = "http://localhost:10002/v1/chat/completions"

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test123",
        "User-Agent": "Roo-Code/1.0"
    }

    # –ó–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Roo-Code
    payload = {
        "model": "gpt-4",  # ID –º–æ–¥–µ–ª–∏
        "messages": [
            {
                "role": "system",
                "content": "You are a helpful assistant."
            },
            {
                "role": "user",
                "content": "Hello! Can you help me with something?"
            }
        ],
        "max_tokens": 1000,
        "stream": False,
        "stream_options": {
            "include_usage": True
        },
        "temperature": 0.7
    }

    try:
        logger.info("Testing Roo-Code sync request...")
        response = requests.post(url, headers=headers, json=payload, timeout=30)

        logger.info(f"Status Code: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            logger.info("‚úÖ Roo-Code sync request successful!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            required_fields = ["id", "object", "created", "model", "choices", "usage"]
            for field in required_fields:
                if field not in data:
                    logger.error(f"‚ùå Missing required field: {field}")
                    return False

            if data["object"] != "chat.completion":
                logger.error(f"‚ùå Wrong object type: {data['object']}")
                return False

            if not data["choices"] or "message" not in data["choices"][0]:
                logger.error("‚ùå Invalid choices format")
                return False

            if "content" not in data["choices"][0]["message"]:
                logger.error("‚ùå Missing content in message")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º usage
            usage = data["usage"]
            required_usage = ["prompt_tokens", "completion_tokens", "total_tokens"]
            for field in required_usage:
                if field not in usage:
                    logger.error(f"‚ùå Missing usage field: {field}")
                    return False

            logger.info(f"Response format: {json.dumps(data, indent=2, ensure_ascii=False)[:500]}...")
            return True
        else:
            logger.error(f"‚ùå Request failed: {response.text}")
            return False

    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        return False

async def test_async_roo_code_streaming():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Roo-Code"""

    url = "http://localhost:10002/v1/chat/completions"

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test123",
        "User-Agent": "Roo-Code/1.0"
    }

    # Streaming –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Roo-Code
    payload = {
        "model": "gpt-4",
        "messages": [
            {
                "role": "user",
                "content": "Tell me a short story about a cat"
            }
        ],
        "max_tokens": 200,
        "stream": True,
        "stream_options": {
            "include_usage": True
        },
        "temperature": 0.7
    }

    try:
        logger.info("Testing Roo-Code streaming request...")

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as response:

                if response.status != 200:
                    logger.error(f"‚ùå Streaming request failed: {await response.text()}")
                    return False

                logger.info("‚úÖ Streaming connection established!")

                # –ß–∏—Ç–∞–µ–º SSE —Å–æ–±—ã—Ç–∏—è
                content = ""
                usage_received = False

                async for line in response.content:
                    line = line.decode('utf-8').strip()
                    if line.startswith('data: '):
                        data = line[6:]
                        if data == '[DONE]':
                            logger.info("‚úÖ Streaming completed successfully")
                            break

                        try:
                            chunk = json.loads(data)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç chunk
                            if 'choices' in chunk and chunk['choices']:
                                choice = chunk['choices'][0]

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ delta
                                if 'delta' in choice:
                                    delta = choice['delta']
                                    if 'content' in delta and delta['content']:
                                        content += delta['content']
                                        print(delta['content'], end='', flush=True)

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º finish_reason
                                if 'finish_reason' in choice and choice['finish_reason']:
                                    logger.info(f"Finish reason: {choice['finish_reason']}")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º usage –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º chunk
                            if 'usage' in chunk:
                                usage = chunk['usage']
                                required_usage = ["prompt_tokens", "completion_tokens", "total_tokens"]
                                for field in required_usage:
                                    if field not in usage:
                                        logger.error(f"‚ùå Missing usage field in stream: {field}")
                                        return False
                                logger.info(f"Usage stats: {usage}")
                                usage_received = True

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è chunk
                            required_chunk_fields = ["id", "object", "created", "model", "choices"]
                            for field in required_chunk_fields:
                                if field not in chunk:
                                    logger.error(f"‚ùå Missing chunk field: {field}")
                                    return False

                            if chunk["object"] != "chat.completion.chunk":
                                logger.error(f"‚ùå Wrong chunk object type: {chunk['object']}")
                                return False

                        except json.JSONDecodeError:
                            logger.warning(f"Invalid JSON chunk: {data}")

                print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ streaming
                logger.info(f"Final content length: {len(content)} characters")

                if not usage_received:
                    logger.warning("‚ö†Ô∏è Usage statistics not received in stream")

                return True

    except Exception as e:
        logger.error(f"‚ùå Streaming error: {e}")
        return False

def test_minimal_roo_code_compatibility():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ Roo-Code"""

    url = "http://localhost:10002/v1/chat/completions"

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test123"
    }

    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "user", "content": "Hello world"}
        ]
    }

    try:
        logger.info("Testing minimal Roo-Code compatibility...")
        response = requests.post(url, headers=headers, json=payload, timeout=10)

        if response.status_code == 200:
            logger.info("‚úÖ Minimal Roo-Code compatibility test passed!")
            return True
        else:
            logger.error(f"‚ùå Minimal test failed: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        logger.error(f"‚ùå Minimal test error: {e}")
        return False

if __name__ == "__main__":
    print("=== Testing Roo-Code Compatibility ===")

    # –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    test1 = test_minimal_roo_code_compatibility()

    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    test2 = test_sync_roo_code_request()

    # –¢–µ—Å—Ç 3: Streaming –∑–∞–ø—Ä–æ—Å
    print("\n=== Testing Streaming ===")
    test3 = asyncio.run(test_async_roo_code_streaming())

    # –ò—Ç–æ–≥–∏
    print("\n=== RESULTS ===")
    print(f"Minimal compatibility: {'‚úÖ PASS' if test1 else '‚ùå FAIL'}")
    print(f"Full sync request: {'‚úÖ PASS' if test2 else '‚ùå FAIL'}")
    print(f"Streaming request: {'‚úÖ PASS' if test3 else '‚ùå FAIL'}")

    if test1 and test2 and test3:
        print("üéâ ALL TESTS PASSED! Server is fully compatible with Roo-Code!")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check logs for details.")